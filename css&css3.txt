1、opacity   filter                    
   opacity：css3，兼容IE9+
   filter: Alpha(opacity=50)，兼容IE8及以下浏览器，等价于 opacity:0.5

2、alpha   opacity
   alpha：alpha通道对元素设定透明度时，可以单独针对元素背景色和文字颜色等来指定透明度,只要设置了颜色的地方都可以使用
   opacity：opacity属性只能指定整个元素的透明度

3、outline   outline-offset
   outline：
   css2 ，轮廓线不会占据空间，也不一定是矩形
   outline是简写属性，分开写则是以下三个属性，顺序可以调换
      outline-color    默认黑色
      outline-style    若省略，浏览器不绘制
      outline-width    属性值可为：npx thin medium thick 默认是medium 

   outline-offset：
   css3 , IE不支持
   偏移border的距离，当前IE(当前最高是IE11)都不支持
   属性值可为正负值，负值表示轮郭线向内偏移，绘制在边框内部

4、transition与animation       
   css3  IE9及以下不兼容
   transition  
      transition-property  必须
      transition-duration  必须
      transition-timing-function
      transition-delay
   只能指定属性的开始值和结束值，以平滑过渡的方式来实现动画效果，不能实现复杂的动画效果

   animation  
     animation-name       必须
     animation-duration   必须
     animation-timing-function
     animation-delay
     animation-iteration-count
     animation-direction
   通过设置关键帧来实现复杂的动画效果，其实现原理上可简单理解为由多个transition构成的动画，transition可简单理解为animation的一帧动画

5、px、em、rem  
   都是相对长度单位  
   px：  
       是相对于显示器屏幕分辨率而言的。(CSS2.0) 
   em： 
       相对于当前对象内文本的字体尺寸，如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸(16px);
       其会继承父级元素的字体大小，注意避免1.2*1.2 = 1.44em的情况。
   rem：
       是css3新增的相对单位，与em区别在于rem是相对于html根元素，兼容IE9+;
       关于rem,大多数人都这么用：
       html {
          font-size: 62.5%; /* 62.5% of 1em (16px) = 10px = 1rem*/
       }
       body {          
          font-size: 1.6rem; /* Font-sizing with rem unit */
       }
      IE9+则计算有误差，1rem = 9.93px，并非10px
      而chrome下，1rem = 12px，因为chrome支持最小的字体为12px，无法设置10px的字体。    
      解决方法：增大基础值的倍数
      html {
          font-size: 625%;
      }
      body {
          font-size: 0.16rem;
      }
      腾讯ISUX有一篇文章写的不错，url：http://isux.tencent.com/web-app-rem.html
6、Flex布局(新版弹性布局)
   IE10及以上才兼容 手机端不支持
   参考：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html
   display：flex;
   display: -webkit-flex; /* Safari */

   采用Flex布局的元素，称为Flex容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称"项目"。

   6个属性设置在容器上:
     .box{
          flex-direction: row | row-reverse | column | column-reverse;
          /*主轴方向：左到右（默认） | 右到左 | 上到下 | 下到上*/

          flex-wrap: nowrap | wrap | wrap-reverse;
          /*换行：不换行（默认） | 换行 | 换行并第一行在下方*/

          flex-flow: <flex-direction> || <flex-wrap>;
          /*主轴方向和换行简写*/

          justify-content: flex-start | flex-end | center | space-between | space-around;
          /*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/

          align-items: flex-start | flex-end | center | baseline | stretch;
          /*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/

          align-content: flex-start | flex-end | center | space-between | space-around | stretch;
          /*多主轴对齐：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 上下平均分布*/
      }   


   6个属性设置在项目上:
   .item{
        order: <integer>;
        /*排序：数值越小，越排前，默认为0*/

        flex-grow: <number>; /* default 0 */
        /*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/

        flex-shrink: <number>; /* default 1 */
        /*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/

        flex-basis: <length> | auto; /* default auto */
        /*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/

        flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
        /*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/

        align-self: auto | flex-start | flex-end | center | baseline | stretch;
        /*单独对齐方式：自动（默认） | 顶部对齐 | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/
    }

7、@media screen 与 @media only screen  CSS3
   他们的区别W3C的说法是：
   The keyword ‘only’ can also be used to hide style sheets from older user agents. User agents must process media queries 
   starting with ‘only’ as if the ‘only’ keyword was not present.
   因为没有only这种媒体类型，所以对于古董浏览器来说，这个样式会被忽略掉。

8、浮动
   在非IE浏览器（如Firefox）下，当容器的高度为auto，且容器的内容中有浮动（float为left或right）的元素，在这种情况下，容器的高度不能自动伸长以适应内
   容的高度，使得内容溢出到容器外面而影响（甚至破坏）布局的现象。这个现象叫浮动溢出，为了防止这个现象的出现而进行的CSS处理，就叫CSS清除浮动。

   清除浮动方法：
   1）使用空元素：
      在浮动元素后使用一个空元素<div class="clear"></div> ，设置css为 clear:both;
      优点：简单，代码少，浏览器兼容性好。
      缺点：需要添加大量无语义的html元素，代码不够优雅，后期不容易维护。
   2）使用CSS的overflow属性：
      给浮动元素的容器添加overflow:hidden;或overflow:auto;可以清除浮动，
      另外在 IE6 IE5中还需要触发hasLayout，例如为父元素设置容器宽高或设置 zoom:1。
      .parent{
         overflow: hidden;  /* 或overflow:auto; */ 
         zoom: 1;
      }
   3）给浮动元素的容器添加浮动：
      给浮动元素的容器也添加上浮动属性即可清除内部浮动，但是这样会使其整体浮动，影响布局，不推荐使用。
   4）使用邻接元素处理：
      什么都不做，给浮动元素后面的元素添加clear属性，原理跟使用空元素一样，要看场景使用。
   5）使用CSS的:after伪元素：
      :after伪元素实现元素末尾添加一个看不见的块元素（Block element）清理浮动。
      .clearfix:after{
        content: ""; 
        display: block; 
        height: 0; 
        clear: both; 
        visibility: hidden;          
      }
      .clearfix {       
        zoom: 1;  /* 触发IE6 IE7 hasLayout */ 
      }
    6）bootstrap简洁写法：
       上一种方法的简洁写法，bootstrap中大量使用此方法来清除浮动
      .clearfix:after {
        content: "";
        display: table;  /* 改成 display: block;也是可以的 */ 
        clear: both;
      }
      .clearfix {        
        zoom: 1;  /* 触发IE6 IE7 hasLayout */ 
      }

8、CSS3动画事件
    animation事件
    -webkit-animation动画有三个事件：　　　　　　
　　开始事件 webkitAnimationStart
　　结束事件  webkitAnimationEnd
　　重复运动事件 webkitAnimationIteration

    transition事件
    在动画结束时，也存在结束的事件：webkitTransitionEnd;
　　但是注意：transition,也仅仅有这一个事件。
    
    用法：
    El.addEventListener("webkitAnimationStart", function(){}, false);
    $(El).on("webkitAnimationStart", function(){},false);





